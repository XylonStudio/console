// 
// the Developer Command Promt for Xylon Studio is based on termlib.js
//
// Credit(s)
// (c) Norbert Landsteiner 2003-2005
// mass:werk - media environments
// <http://www.masswerk.at>
//
// Developer(s)
// Xylon Studio
// 

using library.seshaUI;

var app       = new seshaUI();
var termlibjs = app.require("termlib.js");

bool onTop           = false;
string entrypointDir = specialdirectory.applicationdata + "/Xylon Studio/dev/entry/";
string tempTitle;
string tempEntryPoint;
string tempCopy;

var entrypoint = new Directory(entrypointDir);
if entrypoint.Exists() != true {
    entrypoint.Create();
}

#region Application

func main(args) {
    app.title = 'Developer Command Promt for Xylon Studio';
    init(application);
    application.run();
    term[1].focus();
    if args != null {
        mountDirectory(args.substring(0, args.lastIndexOf("\\")) + "\\");
        app.title = mountedDir;
    }
}

func init(win) {
    if termlibjs == true {
        termOpen(1);
    }
    else {
        MessageBox.Show("An error occured.", app.title, MessageButtons.OK, MessageIcon.Error);
        app.destroy();
    }
    win.width(680);
    win.height(360);
}

func application_onReady() {
    systemmenu.enable('Always visible', 'stayOnTop();');
    application.onExit('application.destroy();');
    term[1].focus();
}

func stayOnTop() {
    if onTop == false {
        onTop = true;
        application.topmost(true);
    }
    else {
        onTop = false;
        application.topmost(false);
    }
}

func aboutWindow() {
    term[1].write(aboutTerm2);
    term[1].newLine();
    term[1].prompt();
}

#endregion

#region Config

string mountedDir = '';
var appDir        = specialdirectory.currentdirectory;
appDir            = appDir.substring(0, appDir.lastIndexOf("\\"));
string appname    = '';
string apptitle   = '';
int procID        = 0;
var term          = new Array();

var helpPage=[
    '%CS%+r Developer Command Prompt Help %-r',
    '  use one of the following commands:',
    '     clear ......... clear the terminal',
    '     exit .......... close the terminal ( or unmount ) <ECS>',
    '     cmd ........... run cmd commands',
    '     SDK -ls ....... list all the installed SDK Engines',
    '     dir -mount .... mount the specified directory',
    '     dir -unmount .. unmount the mounted directory',
    '     xs -new cmod .. create a new C Modulus project',
    '     xs -create .... create a new project',
    '     xs -build ..... build project',
    '     xs -run ....... run application',
    '     xs -exit ...... close application',
    '     help .......... show this help page',
    ' '
];

var aboutTerm=[
'About Developer Command Prompt for Xylon Studio',
    ' ',
    'Author: Donald Pakkies',
    'License: GPL v3',
    'Version: 1.2'
];

var aboutTerm2 =[
'about',
    'About Developer Command Prompt for Xylon Studio',
    ' ',
    'Author: Donald Pakkies',
    'License: GPL v3',
    'Version: 1.2'
];

func termOpen(n) {
    if !term[n] {
        var y=(n==1)? 70: 280;
        term[n]=new Terminal (
            {
                x: 220,
                y: y,
                rows: 21,
                cols: 94, 
                //greeting: 'Type "help" for help.%n',
                id: n,
                termDiv: 'termDiv'+n,
                crsrBlinkMode: true,
                handler: termHandler,
                exitHandler: termExitHandler
            }
        );
        if term[n] {
            term[n].open();
        }
    }
    else if term[n].closed {
        term[n].open();
    }
    else {
        term[n].focus();
    }
}

func termExitHandler() {
    // optional handler called on exit
    // activate other terminal if open
    var other=(this.id==1)? 2:1;
    if (term[other]) && (term[other].closed==false) {
        term[other].focus();
    }
}

#endregion

#region Commands

func termHandler() {
    // called on <CR> or <ENTER>
    
    this.newLine();
    var cmd = this.lineBuffer;
    if cmd != "" {
        if cmd == "clear" {
            this.clear();
            this.prompt();
        }
        else if cmd== 'exit' {
            this.close();
            application.destroy();
        }
        else if cmd=='about' {
            this.write(aboutTerm);
            this.newLine();
            this.prompt();
        }
        else if cmd=='help' {
            this.write(helpPage);
            this.newLine();
            this.prompt();
        }
        else if cmd=='id' {
            this.write('terminal id: ' + this.id);
            output.writeline('terminal id: ' + this.id);
            this.newLine();
            this.prompt();
        }
        else if cmd.startsWith("editor") {
            this.prompt();
            var command = cmd.replace("editor ", "");
            if mountedDir != null {
                newProcess.exec(command, '"' + mountedDir + '"');
            }
            else {
                newProcess.exec(command, "");
            }
        }
        else if cmd.startsWith("cmd") {
            this.prompt();
            var command = cmd.replace("cmd ", "");
            var sp = command.split(" ");
            if sp[1] != null {
                var args = sp[1];
                newProcess.exec(sp[0], args);
            }
            else {
                newProcess.exec(sp[0], "");
            }
        }
        else if cmd == 'SDK -ls' {
            term[1].prompt();
            var searchHere = Path.GetDirectories(specialdirectory.programfilesX86 + "/Xylon Studio/SDK");
            searchHere.forEach(func (sdk) {
                if File.Exists(sdk + "//engine.xpe") == true && Path.Exists(sdk + "//package") == true {
                    term[1].write(Path.GetName(sdk));
                    term[1].prompt();
                }
            });
            //if File.Exists(sdk + "//engine.xpe") == true && Path.Exists(sdk + "//package") == true {
            //sDirectory.getDirectories(searchHere);
        }
        else if cmd == "entry -ls" {
            term[1].prompt();
            var entry   = new Directory(entrypointDir);
            var entries = entry.GetFiles(entrypointDir, "*.ent", false);
            entries.forEach(func(ent) {
                var entryPath = File.Read(ent);
                term[1].write(File.Name(ent).replace(".ent", "") + " (" + entryPath + ")");
                term[1].prompt();
            });
        }
        else if cmd.startsWith('entry point -mount') {
            var dir = cmd;
            dir     = dir.replace('entry point -mount ', '');
            this.prompt();
            if File.Exists(entrypointDir + dir + ".ent") == true {
                var entry = File.Read(entrypointDir + dir + ".ent");
                var di    = new Directory(entry);
                di.Create();
                mountDirectory(entry);
                output.writeline(entry + ' has been successfuly mounted');
                this.write(entry + ' has been successfuly mounted');
                document.title = entry;
            }
            else 
            {
                output.writeline(dir + " doesn't exist");
                this.write(dir + " doesn't exist");
            }
            this.prompt();
        }
        else if cmd.startsWith("entry point -create") {
            var create = cmd;
            create     = create.replace('entry point -create ', '');
            if File.Exists(entrypointDir + create) != true {
                file.write(entrypointDir + create + ".ent", "");
                if File.Exists(entrypointDir + create + ".ent") != true {
                    this.write("Can't create new entry point");
                }
                else {
                    this.write(create + " has been successfuly created");
                    tempEntryPoint = entrypointDir + create + ".ent";
                    tempTitle      = document.title;
                    document.title = "Enter mount Directory";
                }
            }
            else {
                this.write(create + " already exists");
            }
            this.prompt();
        }
        else if cmd.startsWith("copy -from") {
            var from = cmd;
            from     = from.replace("copy -from ", "");
            
            if File.Exists(from) == true {
                tempCopy = from;
                this.write(string.Format("{0} has been succesfuly copied", from));
            }
            else {
                this.write(string.Format("{0} doesn't exist", from));
            }
            this.prompt();
        }
        else if cmd.startsWith("copy -to") {
            var to = cmd;
            to     = to.replace("copy -to ", "");
        
            var path = new Directory(to);
            if path.Exists() == true {
                var name = File.Name(tempCopy);
                if !tempCopy.endsWith("/") {
                    tempCopy = tempCopy + "/";
                }
                file.copyTo(tempCopy, to + name);
                if File.Exists(to + name) == true {
                    this.write(string.Format("{0} has been successfuly copied to {1}", name, to));
                }
                else {
                    this.write(string.Format("{0} could not be copied to {1}", name, to));
                }
            }
            else {
                this.write(string.Format("{0} doesn't exist", to));
            }
            this.prompt();
        }
        else if cmd.startsWith('xs -new cmod') {
            var create = cmd;
            create     = create.replace('xs -new cmod ', '');
            sDirectory.exists(mountedDir + create);
            this.prompt();
            if sDirectory.directoryExists == true {
                output.writeline("Can't create project. Path already exists");
                this.write("Can't create project. Path already exists");
            }
            else
            {
                sDirectory.exists(specialdirectory.currentdirectory + '/app/cmodulus/project');
                if sDirectory.directoryExists == true {
                    sDirectory.copyTo(specialdirectory.currentdirectory + '/app/cmodulus/project', mountedDir + create);
                    
                    setname(mountedDir + create + '/' + create + '.xsproj', mountedDir + create + '/My Project/application.apc', create, "cmodulus");
                    sDirectory.copyTo(specialdirectory.currentdirectory + '/app/cmodulus/files', mountedDir + create + '/' + create.replace(' ', ''));
                    output.writeline('"' +  create + '" has been successfuly created');
                    this.write('"' + create + '" has been successfuly created');
                }
                else
                {
                    output.writeline('Cannot locate the required files to create ' + create);
                    this.write('Cannot locate the required files to create ' + create);
                }
            }
            this.newLine();
            this.prompt();
        }
        else if cmd.startsWith('xs -create') {
            var create = cmd;
            create     = create.replace('xs -create ', '');
            sDirectory.exists(mountedDir + create);
            this.prompt();
            if sDirectory.directoryExists == true {
                output.writeline("Can't create project. Path already exists");
                this.write("Can't create project. Path already exists");
            }
            else
            {
                sDirectory.exists(specialdirectory.currentdirectory + '/app/example/project');
                if sDirectory.directoryExists == true {
                    sDirectory.copyTo(specialdirectory.currentdirectory + '/app/example/project', mountedDir + create);
                    
                    setname(mountedDir + create + '/' + create + '.xsproj', mountedDir + create + '/My Project/application.apc', create, "example");
                    sDirectory.copyTo(specialdirectory.currentdirectory + '/app/example/files', mountedDir + create + '/' + create.replace(' ', ''));
                    output.writeline('"' +  create + '" has been successfuly created');
                    this.write('"' + create + '" has been successfuly created');
                }
                else
                {
                    output.writeline('Cannot locate the required files to create ' + create);
                    this.write('Cannot locate the required files to create ' + create);
                }
            }
            this.newLine();
            this.prompt();
        }
        else if cmd.startsWith('xs -build') {
            var build = cmd;
            build     = build.replace('xs -build ', '');
            this.prompt();
            newProcess.start(appDir + '/IDE/xspb.exe', mountedDir + build);
            output.writeline('Building...');
            this.write('Building...');
        }
        else if cmd.startsWith('xs -run') {
            var exe = cmd;
            exe     = exe.replace('xs -run ', '');
            this.prompt();
            newProcess.start(mountedDir + exe, '');
            procID = newProcess.id;
        }
        else if cmd == 'xs -exit' {
            newProcess.kill(procID);
            this.prompt();
        }
        else if cmd.startsWith("dir -dirCreate") {
            var dir = cmd;
            dir     = dir.replace("dir -dirCreate ", "");
            try {
                sDirectory.exists(mountedDir + dir);
                if sDirectory.directoryExists == true {
                    this.write("Can't create directory. Path '" + dir + "' already exists");
                }
                else {
                    sDirectory.create(mountedDir + dir);
                    sDirectory.exists(mountedDir + dir);
                    if sDirectory.directoryExists == true {
                        this.write(mountedDir + dir + " has been successfuly created");
                        output.writeln(mountedDir + dir + " has been successfuly created");
                    }
                    else {
                        this.write(mountedDir + dir + " could not be created");
                        output.writeln(mountedDir + dir + " could not be created");
                    }
                }
            }
            catch exception { 
                this.write(exception);
                output.writeln(exception);
            }
            this.prompt();
        }
        else if cmd.startsWith('dir -mount') {
            var dir = cmd;
            dir     = dir.replace('dir -mount ', '');
            sDirectory.exists(mountedDir + dir);
            this.prompt();
            if sDirectory.directoryExists == true {
                mountDirectory(mountedDir + dir);
                output.writeline(mountedDir + ' has been successfuly mounted');
                this.write(mountedDir + ' has been successfuly mounted');
                document.title = mountedDir;
            }
            else 
            {
                output.writeline(dir + " doesn't exist");
                this.write(dir + " doesn't exist");
            }
            this.prompt();
        }
        else if cmd.startsWith('dir -unmount') {
            this.prompt();
            if document.title == 'terminal' {
                var cmdDir = cmd.replace('dir -unmount ', '');
                this.write(cmdDir + ' is not mounted');
                output.writeline(cmdDir + ' is not mounted');
                this.newLine();
            }
            else 
            {
                this.write(' ' + document.title + ' has been successfuly unmounted');
                output.writeline(' ' + document.title + ' has been successfuly unmounted');
                this.newLine();
                mountedDir     = '';
                document.title = 'Developer Command Promt for Xylon Studio';
            }
            this.prompt();
        }
        else {
            if document.title == "Enter mount Directory" {
                var path = new Directory(mountedDir + cmd);
                if path.Exists() == true {
                    File.Write(tempEntryPoint, mountedDir + cmd);
                    document.title = tempTitle;
                }
                else {
                    this.write(mountedDir + cmd + " doesn't exist");
                }
                this.prompt();
            }
            else {
                this.prompt();
                this.type('"' + cmd + '"' + ' is not recognized as an internal command.');
                output.writeline('"' + cmd + '"' + ' is not recognized as an internal command.');
                this.newLine();
                this.prompt();
            }
        }
    }
}

func mountDirectory(dir) {
    if (dir.endsWith('/') || "\\") {
        mountedDir = dir;;
    }
    else
    {
        mountedDir = dir + '/';;
    }
}

func process_data(data) {
    procID = newProcess.id; 
    if data != "" {
        term[1].write(data);
        term[1].newLine();
        term[1].prompt(); 
    }
}

func process_onExit() {
    term[1].write('Done!');
    term[1].prompt();
}

#endregion

#region External

func getFiles_onRetrieve(sdk) {
    term[1].write(sdk);
    term[1].newLine();
    term[1].prompt();
}

func setname(url, url2, name, type) {
    //Xylon Project
    file.read(specialdirectory.currentdirectory + '/app/' + type + '/project_template.xsproj');
    var xsproj  = file.results;
    var appid   = name.ReplaceAll(' ', '');
    var appname = name.replace(/[^A-Za-z0-9]/g, '');
    appid       = appid.replace(/[^A-Za-z0-9]/g, '');
    appid       = appid.toLowerCase();
    xsproj      = xsproj.replace('[app_name]', appname.ReplaceAll(' ', ''));
    xsproj      = xsproj.replace('windows.[app_name]', 'windows.' + appid);
    file.write(url, xsproj);
    
    //Application APC
    file.read(specialdirectory.currentdirectory + '/app/example/application_template.apc');
    var apc = file.results;
    apc     = apc.replace('[app_name].exe', appname.replace(' ', '') + '.exe');
    apc     = apc.replace('windows.[app_name]', 'windows.' + appid);
    file.write(url2, apc);
    
}

#endregion
